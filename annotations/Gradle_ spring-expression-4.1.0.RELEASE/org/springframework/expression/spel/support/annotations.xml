<root>
    <item name='org.springframework.expression.spel.support.BooleanTypedValue TRUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor.OptimalPropertyAccessor void generateCode(java.lang.String, org.springframework.asm.MethodVisitor, org.springframework.expression.spel.CodeFlow) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveMethodResolver org.springframework.expression.MethodExecutor resolve(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.util.List&lt;org.springframework.core.convert.TypeDescriptor&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor.OptimalPropertyAccessor void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor java.lang.reflect.Method findSetterForProperty(java.lang.String, java.lang.Class&lt;?&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveMethodExecutor ReflectiveMethodExecutor(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor java.lang.String[] getPropertyMethodSuffixes(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor.OptimalPropertyAccessor org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor java.lang.reflect.Method findGetterForProperty(java.lang.String, java.lang.Class&lt;?&gt;, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveConstructorResolver org.springframework.expression.ConstructorExecutor resolve(org.springframework.expression.EvaluationContext, java.lang.String, java.util.List&lt;org.springframework.core.convert.TypeDescriptor&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor java.lang.String[] getPropertyMethodSuffixes(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectionHelper java.lang.Object[] setupArgumentsForVarargsInvocation(java.lang.Class&lt;?&gt;[], java.lang.Object...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveConstructorExecutor org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext, java.lang.Object...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor java.lang.reflect.Field findField(java.lang.String, java.lang.Class&lt;?&gt;, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveConstructorExecutor java.lang.reflect.Constructor&lt;?&gt; getConstructor()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectionHelper boolean convertAllArguments(org.springframework.expression.TypeConverter, java.lang.Object[], java.lang.reflect.Method) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor org.springframework.expression.PropertyAccessor createOptimalAccessor(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.BooleanTypedValue org.springframework.expression.spel.support.BooleanTypedValue forValue(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveMethodExecutor java.lang.reflect.Method getMethod()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.BooleanTypedValue FALSE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveMethodExecutor org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.Object...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveMethodResolver java.lang.reflect.Method[] getMethods(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor java.lang.String getPropertyMethodSuffix(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor.OptimalPropertyAccessor void generateCode(java.lang.String, org.springframework.asm.MethodVisitor, org.springframework.expression.spel.CodeFlow) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectionHelper int getTypeDifferenceWeight(java.util.List&lt;org.springframework.core.convert.TypeDescriptor&gt;, java.util.List&lt;org.springframework.core.convert.TypeDescriptor&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor.OptimalPropertyAccessor org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor java.lang.reflect.Method findGetterForProperty(java.lang.String, java.lang.Class&lt;?&gt;, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveConstructorExecutor ReflectiveConstructorExecutor(java.lang.reflect.Constructor&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectionHelper java.lang.Object[] setupArgumentsForVarargsInvocation(java.lang.Class&lt;?&gt;[], java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor java.lang.reflect.Method findSetterForProperty(java.lang.String, java.lang.Class&lt;?&gt;, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectionHelper boolean convertAllArguments(org.springframework.expression.TypeConverter, java.lang.Object[], java.lang.reflect.Method) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectiveMethodResolver org.springframework.expression.MethodExecutor resolve(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.util.List&lt;org.springframework.core.convert.TypeDescriptor&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor void write(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectivePropertyAccessor org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.expression.spel.support.ReflectionHelper java.lang.Object[] setupArgumentsForVarargsInvocation(java.lang.Class&lt;?&gt;[], java.lang.Object...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
