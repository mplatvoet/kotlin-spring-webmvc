<root>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReaderUtils GENERATED_BEAN_NAME_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory boolean isAutowireCandidate(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.factory.config.DependencyDescriptor, org.springframework.beans.factory.support.AutowireCandidateResolver) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory java.lang.String[] getAliases(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver void setBeanFactory(org.springframework.beans.factory.BeanFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory T getBean(java.lang.String, java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader int registerBeanDefinitions(java.util.Map&lt;?,?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.ReplaceOverride boolean matches(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AutowireCandidateQualifier AutowireCandidateQualifier(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory boolean isAutowireCandidate(java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor, org.springframework.beans.factory.support.AutowireCandidateResolver) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition AbstractBeanDefinition(org.springframework.beans.factory.config.BeanDefinition) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void autowireByName(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper, org.springframework.beans.MutablePropertyValues) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.SimpleInstantiationStrategy java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Constructor&lt;?&gt;, java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory boolean isPrototype(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyReference(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.lang.String determineAutowireCandidate(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, org.springframework.beans.factory.config.DependencyDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AutowireCandidateResolver java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition SCOPE_DEFAULT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader LAZY_INIT_KEY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void autowireByName(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper, org.springframework.beans.MutablePropertyValues) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.lang.String determineAutowireCandidate(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, org.springframework.beans.factory.config.DependencyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultSingletonBeanRegistry NULL_OBJECT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AutowireCandidateQualifier AutowireCandidateQualifier(java.lang.Class&lt;?&gt;, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.String originalBeanName(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory boolean containsBean(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory boolean isExcludedFromDependencyCheck(java.beans.PropertyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.util.List&lt;org.springframework.beans.factory.config.BeanPostProcessor&gt; getBeanPostProcessors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setScope(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory boolean isAutowireCandidate(java.lang.String, org.springframework.beans.factory.config.DependencyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory A findAnnotationOnBean(java.lang.String, java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory void checkMergedBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.FactoryBeanRegistrySupport java.lang.Object getObjectFromFactoryBean(org.springframework.beans.factory.FactoryBean&lt;?&gt;, java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.LookupOverride boolean matches(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition void prepareMethodOverride(org.springframework.beans.factory.support.MethodOverride) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory T getBean(java.lang.String, java.lang.Class&lt;T&gt;, java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Object createBean(java.lang.Class&lt;?&gt;, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void applyBeanPropertyValues(java.lang.Object, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory boolean containsLocalBean(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setFactoryMethod(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder childBeanDefinition(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition void copyQualifiersFrom(org.springframework.beans.factory.support.AbstractBeanDefinition) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultSingletonBeanRegistry java.lang.Object getSingletonMutex()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.GenericBeanDefinition GenericBeanDefinition(org.springframework.beans.factory.config.BeanDefinition) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Class&lt;?&gt; determineTargetType(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver boolean checkGenericTypeMatch(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader void registerBeanDefinition(java.lang.String, java.util.Map&lt;?,?&gt;, java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory java.lang.Class&lt;?&gt; getType(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReaderUtils org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition(java.lang.String, java.lang.String, java.lang.ClassLoader)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void autowireBean(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver org.springframework.core.ResolvableType getReturnTypeForFactoryMethod(org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.factory.config.DependencyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory org.springframework.beans.factory.support.RootBeanDefinition getMergedBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.config.BeanDefinition)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReaderUtils java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.beans.PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(org.springframework.beans.BeanWrapper) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void autowireBeanProperties(java.lang.Object, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.ManagedList java.lang.Object merge(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader REF_SUFFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader int registerBeanDefinitions(java.util.ResourceBundle, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.Class&lt;?&gt; getType(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setDependencyCheck(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReaderUtils void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.lang.Object doResolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.util.Set&lt;java.lang.String&gt;, org.springframework.beans.TypeConverter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition INFER_METHOD'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.util.Map&lt;java.lang.Class&lt;?&gt;,java.lang.Class&lt;? extends java.beans.PropertyEditor&gt;&gt; getCustomEditors()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinitionReader int loadBeanDefinitions(java.lang.String...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.SimpleInstantiationStrategy java.lang.Object instantiateWithMethodInjection(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory org.springframework.beans.BeanWrapper autowireConstructor(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.reflect.Constructor&lt;?&gt;[], java.lang.Object[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void autowireByType(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper, org.springframework.beans.MutablePropertyValues) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Class&lt;?&gt; getTypeForFactoryMethod(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReaderUtils void registerBeanDefinition(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.support.BeanDefinitionRegistry) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader int registerBeanDefinitions(java.util.Map&lt;?,?&gt;, java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setRole(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.lang.String determineHighestPriorityCandidate(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition void addQualifier(org.springframework.beans.factory.support.AutowireCandidateQualifier) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory boolean isAutowireCandidate(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.factory.config.DependencyDescriptor, org.springframework.beans.factory.support.AutowireCandidateResolver) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.lang.Object resolveDependency(org.springframework.beans.factory.config.DependencyDescriptor, java.lang.String, java.util.Set&lt;java.lang.String&gt;, org.springframework.beans.TypeConverter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory boolean isPrototype(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.InstantiationStrategy java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory T getBean(java.lang.String, java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.util.Map&lt;java.lang.String,T&gt; getBeansOfType(java.lang.Class&lt;T&gt;, boolean, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver org.springframework.beans.factory.support.RootBeanDefinition getResolvedDecoratedDefinition(org.springframework.beans.factory.support.RootBeanDefinition) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader int registerBeanDefinitions(java.util.ResourceBundle) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void autowireByType(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper, org.springframework.beans.MutablePropertyValues) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setInitMethodName(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionRegistry org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory boolean isAutowireCandidate(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.factory.config.DependencyDescriptor, org.springframework.beans.factory.support.AutowireCandidateResolver) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader SCOPE_KEY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory java.util.Map&lt;java.lang.String,T&gt; getBeansOfType(java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.InstantiationStrategy java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.SimpleInstantiationStrategy java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 4'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.Class&lt;?&gt; getTypeForFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.RootBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.SimpleAutowireCandidateResolver java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReader int loadBeanDefinitions(org.springframework.core.io.Resource...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultBeanNameGenerator java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.lang.String determinePrimaryCandidate(java.util.Map&lt;java.lang.String,java.lang.Object&gt;, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.ManagedSet java.lang.Object merge(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader PARENT_KEY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory boolean isSingleton(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setDestroyMethodName(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReaderUtils java.lang.String registerWithGeneratedName(org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.ChildBeanDefinition ChildBeanDefinition(org.springframework.beans.factory.support.ChildBeanDefinition) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory A findAnnotationOnBean(java.lang.String, java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition void overrideFrom(org.springframework.beans.factory.config.BeanDefinition) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.ManagedProperties java.lang.Object merge(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory boolean containsBean(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReaderUtils java.lang.String registerWithGeneratedName(org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory java.util.Map&lt;java.lang.String,java.lang.Object&gt; getBeansWithAnnotation(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory boolean isTypeMatch(java.lang.String, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.ChildBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.SimpleAutowireCandidateResolver boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.GenericBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReader int loadBeanDefinitions(java.lang.String...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setParentName(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory org.springframework.beans.factory.support.RootBeanDefinition getMergedBeanDefinition(java.lang.String, org.springframework.beans.factory.config.BeanDefinition)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory java.lang.Object getBean(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.Class&lt;?&gt; predictBeanType(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.util.Map&lt;java.lang.String,java.lang.Object&gt; findAutowireCandidates(java.lang.String, java.lang.Class&lt;?&gt;, org.springframework.beans.factory.config.DependencyDescriptor)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader ABSTRACT_KEY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.Object getBean(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.beans.PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(org.springframework.beans.BeanWrapper, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.util.Map&lt;java.lang.String,T&gt; getBeansOfType(java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder addDependsOn(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.util.Map&lt;java.lang.String,java.lang.Object&gt; findAutowireCandidates(java.lang.String, java.lang.Class&lt;?&gt;, org.springframework.beans.factory.config.DependencyDescriptor) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader CLASS_KEY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.String[] getAliases(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.util.Set&lt;org.springframework.beans.PropertyEditorRegistrar&gt; getPropertyEditorRegistrars()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Object createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.SimpleInstantiationStrategy java.lang.Object instantiateWithMethodInjection(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Constructor&lt;?&gt;, java.lang.Object[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader CONSTRUCTOR_ARG_PREFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.SimpleInstantiationStrategy java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory boolean isFactoryBean(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory void initBeanWrapper(org.springframework.beans.BeanWrapper) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory org.springframework.beans.BeanWrapper createBeanInstance(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void checkDependencies(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, java.beans.PropertyDescriptor[], org.springframework.beans.PropertyValues) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.String[] unsatisfiedNonSimpleProperties(org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader int registerBeanDefinitions(java.util.Map&lt;?,?&gt;, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.String transformedBeanName(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.ManagedMap java.lang.Object merge(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory java.lang.String[] getAliases(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory java.lang.Object getBean(java.lang.String, java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.Object getBean(java.lang.String, java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Class&lt;?&gt; getTypeForFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder addConstructorArgValue(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setAbstract(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setLazyInit(boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder setAutowireMode(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionReaderUtils java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder genericBeanDefinition(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.MethodOverride boolean matches(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory org.springframework.beans.TypeConverter getTypeConverter()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void checkDependencies(java.lang.String, org.springframework.beans.factory.support.AbstractBeanDefinition, java.beans.PropertyDescriptor[], org.springframework.beans.PropertyValues) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader TRUE_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Object configureBean(java.lang.Object, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory void copyConfigurationFrom(org.springframework.beans.factory.config.ConfigurableBeanFactory) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory boolean isSingleton(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void populateBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, org.springframework.beans.BeanWrapper) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory org.springframework.beans.factory.config.BeanDefinition getMergedBeanDefinition(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder genericBeanDefinition(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.Class&lt;?&gt; resolveBeanClass(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinitionReader int loadBeanDefinitions(org.springframework.core.io.Resource...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition cloneBeanDefinition()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader SINGLETON_KEY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition void applyDefaults(org.springframework.beans.factory.support.BeanDefinitionDefaults) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy java.lang.Object instantiateWithMethodInjection(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder addConstructorArgReference(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AutowireCandidateResolver boolean isAutowireCandidate(org.springframework.beans.factory.config.BeanDefinitionHolder, org.springframework.beans.factory.config.DependencyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory org.springframework.beans.BeanWrapper instantiateUsingFactoryMethod(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory org.springframework.beans.BeanWrapper instantiateBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Class&lt;?&gt; predictBeanType(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory void registerDisposableBeanIfNecessary(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.Class&lt;?&gt;, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.ManagedSet java.util.Set&lt;E&gt; merge(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.MethodOverrides java.util.Set&lt;org.springframework.beans.factory.support.MethodOverride&gt; getOverrides()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition java.util.Set&lt;org.springframework.beans.factory.support.AutowireCandidateQualifier&gt; getQualifiers()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.ManagedList java.util.List&lt;E&gt; merge(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.String[] unsatisfiedNonSimpleProperties(org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.BeanWrapper) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.FactoryBeanRegistrySupport org.springframework.beans.factory.FactoryBean&lt;?&gt; getFactoryBean(java.lang.String, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader REF_PREFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanNameGenerator java.lang.String generateBeanName(org.springframework.beans.factory.config.BeanDefinition, org.springframework.beans.factory.support.BeanDefinitionRegistry) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Object doCreateBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Object resolveBeforeInstantiation(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory org.springframework.beans.factory.support.RootBeanDefinition getMergedLocalBeanDefinition(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.StaticListableBeanFactory java.util.Map&lt;java.lang.String,T&gt; getBeansOfType(java.lang.Class&lt;T&gt;, boolean, boolean)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory boolean isTypeMatch(java.lang.String, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy java.lang.Object instantiateWithMethodInjection(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Constructor&lt;?&gt;, java.lang.Object[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void invokeCustomInitMethod(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.util.Map&lt;java.lang.String,java.lang.Object&gt; getBeansWithAnnotation(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory T doGetBean(java.lang.String, java.lang.Class&lt;T&gt;, java.lang.Object[], boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory java.lang.Object createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory java.lang.Object autowire(java.lang.Class&lt;?&gt;, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.PropertiesBeanDefinitionReader int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory void destroyBean(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.InstantiationStrategy java.lang.Object instantiate(org.springframework.beans.factory.support.RootBeanDefinition, java.lang.String, org.springframework.beans.factory.BeanFactory, java.lang.reflect.Constructor&lt;?&gt;, java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.GenericTypeAwareAutowireCandidateResolver java.lang.Object getSuggestedValue(org.springframework.beans.factory.config.DependencyDescriptor) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder genericBeanDefinition()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.RootBeanDefinition RootBeanDefinition(org.springframework.beans.factory.support.RootBeanDefinition) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory T createBean(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.LookupOverride LookupOverride(java.lang.reflect.Method, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanFactory boolean isFactoryBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.DefaultListableBeanFactory java.lang.Object writeReplace()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.BeanDefinitionBuilder org.springframework.beans.factory.support.BeanDefinitionBuilder addConstructorArg(java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory void invokeCustomInitMethod(java.lang.String, java.lang.Object, org.springframework.beans.factory.support.RootBeanDefinition) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.AbstractBeanDefinition java.lang.Class&lt;?&gt; getBeanClass()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.beans.factory.support.FactoryBeanRegistrySupport org.springframework.beans.factory.FactoryBean&lt;?&gt; getFactoryBean(java.lang.String, java.lang.Object)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
