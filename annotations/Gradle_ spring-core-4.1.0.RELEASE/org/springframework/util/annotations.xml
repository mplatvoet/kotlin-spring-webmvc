<root>
    <item name='org.springframework.util.MimeTypeUtils org.springframework.util.MimeType parseMimeType(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap.ReferenceType SOFT'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void doWithMethods(java.lang.Class&lt;?&gt;, org.springframework.util.ReflectionUtils.MethodCallback) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils JAR_URL_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Log4jConfigurer XML_FILE_EXTENSION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils int getMethodCountForName(java.lang.Class&lt;?&gt;, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String getClassFileName(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils int copy(java.io.File, java.io.File) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Field findField(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PathMatcher boolean matchStart(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ResourceUtils FILE_URL_PREFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertiesPersister void storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.reflect.Constructor&lt;T&gt; getConstructorIfAvailable(java.lang.Class&lt;T&gt;, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils MULTIPART_FORM_DATA'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils.MethodFilter boolean matches(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.reflect.Method getMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CommonsLogWriter CommonsLogWriter(org.apache.commons.logging.Log) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils int getMethodCountForName(java.lang.Class&lt;?&gt;, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isAssignableValue(java.lang.Class&lt;?&gt;, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_XHTML_XML_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void doWithFields(java.lang.Class&lt;?&gt;, org.springframework.util.ReflectionUtils.FieldCallback, org.springframework.util.ReflectionUtils.FieldFilter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PathMatcher boolean matchStart(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String addResourcePathToPackagePath(java.lang.Class&lt;?&gt;, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertyPlaceholderHelper java.lang.String parseStringValue(java.lang.String, org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver, java.util.Set&lt;java.lang.String&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.DefaultPropertiesPersister void store(java.util.Properties, java.io.Writer, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String getShortName(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.SocketUtils java.util.SortedSet&lt;java.lang.Integer&gt; findAvailableUdpPorts(int, int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher AntPathMatcher(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils java.lang.String copyToString(java.io.InputStream, java.nio.charset.Charset) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils JAR_URL_PREFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void doWithFields(java.lang.Class&lt;?&gt;, org.springframework.util.ReflectionUtils.FieldCallback) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap.ReferenceManager org.springframework.util.ConcurrentReferenceHashMap.Reference&lt;K,V&gt; createReference(org.springframework.util.ConcurrentReferenceHashMap.Entry&lt;K,V&gt;, int, org.springframework.util.ConcurrentReferenceHashMap.Reference&lt;K,V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ObjectUtils E caseInsensitiveValueOf(E[], java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CustomizableThreadCreator java.lang.Thread createThread(java.lang.Runnable)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.Class&lt;?&gt; getUserClass(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.reflect.Method getMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils java.lang.String copyToString(java.io.Reader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils URL_PROTOCOL_WSJAR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.InstanceFilter boolean match(T, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertiesPersister void load(java.util.Properties, java.io.Reader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.LinkedCaseInsensitiveMap V put(java.lang.String, V) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ObjectUtils A[] addObjectToArray(A[], O)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.NumberUtils T parseNumber(java.lang.String, java.lang.Class&lt;T&gt;, java.text.NumberFormat) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher boolean match(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils ALL'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils ARRAY_SUFFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher.AntPathStringMatcher AntPathStringMatcher(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CollectionUtils java.util.Iterator&lt;E&gt; toIterator(java.util.Enumeration&lt;E&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ExceptionTypeFilter boolean match(java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.Class&lt;? extends java.lang.Throwable&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.Class&lt;?&gt;[] getAllInterfaces(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils IMAGE_GIF_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils byte[] copyToByteArray(java.io.InputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils void copy(byte[], java.io.OutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.DefaultPropertiesPersister void loadFromXml(java.util.Properties, java.io.InputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CollectionUtils org.springframework.util.MultiValueMap&lt;K,V&gt; unmodifiableMultiValueMap(org.springframework.util.MultiValueMap&lt;? extends K,? extends V&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Field findField(java.lang.Class&lt;?&gt;, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType.SpecificityComparator int compareParameters(T, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StringUtils java.util.Set&lt;java.lang.String&gt; commaDelimitedListToSet(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Assert void notNull(java.lang.Object, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_JSON_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MethodInvoker java.lang.Class&lt;?&gt; resolveClassName(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils int copy(java.io.File, java.io.File) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.NumberUtils T parseNumber(java.lang.String, java.lang.Class&lt;T&gt;, java.text.NumberFormat) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_FORM_URLENCODED_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void makeAccessible(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String getQualifiedName(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean hasMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.Object invokeJdbcMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.InstanceFilter boolean match(T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AutoPopulatingList AutoPopulatingList(org.springframework.util.AutoPopulatingList.ElementFactory&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType void appendTo(java.lang.StringBuilder) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils void copy(byte[], java.io.OutputStream) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType MimeType(java.lang.String, java.lang.String, java.nio.charset.Charset) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void makeAccessible(java.lang.reflect.Constructor&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.LinkedMultiValueMap void setAll(java.util.Map&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType.SpecificityComparator int compareParameters(T, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_OCTET_STREAM'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PathMatcher java.util.Map&lt;java.lang.String,java.lang.String&gt; extractUriTemplateVariables(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.TypeUtils boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.Type) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils int copy(java.io.Reader, java.io.Writer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.SocketUtils java.util.SortedSet&lt;java.lang.Integer&gt; findAvailableUdpPorts(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String getPackageName(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.Class&lt;?&gt; forName(java.lang.String, java.lang.ClassLoader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher java.util.Map&lt;java.lang.String,java.lang.String&gt; extractUriTemplateVariables(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Method[] getUniqueDeclaredMethods(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils CGLIB_CLASS_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CollectionUtils org.springframework.util.MultiValueMap&lt;K,V&gt; toMultiValueMap(java.util.Map&lt;K,java.util.List&lt;V&gt;&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String getQualifiedMethodName(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils void copy(java.lang.String, java.nio.charset.Charset, java.io.OutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.DefaultPropertiesPersister void store(java.util.Properties, java.io.OutputStream, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.net.URL extractJarFileURL(java.net.URL) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean hasMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils.FieldCallback void doWith(java.lang.reflect.Field) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.AntPathMatcher boolean match(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.util.Set&lt;java.lang.Class&lt;?&gt;&gt; getAllInterfacesForClassAsSet(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertyPlaceholderHelper PropertyPlaceholderHelper(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PathMatcher java.util.Map&lt;java.lang.String,java.lang.String&gt; extractUriTemplateVariables(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.Class&lt;?&gt;[] getAllInterfacesForClass(java.lang.Class&lt;?&gt;, java.lang.ClassLoader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.TypeUtils boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils URL_PROTOCOL_ZIP'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CollectionUtils org.springframework.util.MultiValueMap&lt;K,V&gt; unmodifiableMultiValueMap(org.springframework.util.MultiValueMap&lt;? extends K,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.DefaultPropertiesPersister void load(java.util.Properties, java.io.Reader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_FORM_URLENCODED'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.DefaultPropertiesPersister void load(java.util.Properties, java.io.InputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType MimeType(java.lang.String, java.lang.String, java.nio.charset.Charset) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType MimeType(java.lang.String, java.lang.String, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void doWithMethods(java.lang.Class&lt;?&gt;, org.springframework.util.ReflectionUtils.MethodCallback, org.springframework.util.ReflectionUtils.MethodFilter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.net.URL getURL(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils URL_PROTOCOL_VFSFILE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.Class&lt;?&gt;[] getAllInterfacesForClass(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils void copy(java.lang.String, java.nio.charset.Charset, java.io.OutputStream) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String getPackageName(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.LinkedCaseInsensitiveMap java.lang.String convertKey(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AutoPopulatingList AutoPopulatingList(java.lang.Class&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.net.URL extractJarFileURL(java.net.URL)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils IMAGE_PNG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Assert void isInstanceOf(java.lang.Class&lt;?&gt;, java.lang.Object, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils TEXT_XML_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ObjectUtils boolean containsConstant(java.lang.Enum&lt;?&gt;[], java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.DefaultPropertiesPersister void storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void makeAccessible(java.lang.reflect.Field) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils IMAGE_JPEG_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType.SpecificityComparator int compare(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_JSON'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StringUtils java.util.TimeZone parseTimeZoneString(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils void copy(java.lang.String, java.nio.charset.Charset, java.io.OutputStream) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_XML_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType MimeType(java.lang.String, java.lang.String, java.nio.charset.Charset) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PathMatcher java.util.Map&lt;java.lang.String,java.lang.String&gt; extractUriTemplateVariables(java.lang.String, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ObjectUtils boolean containsConstant(java.lang.Enum&lt;?&gt;[], java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils int copy(java.io.Reader, java.io.Writer) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils byte[] copyToByteArray(java.io.File) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils URL_PROTOCOL_VFSZIP'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AlternativeJdkIdGenerator java.util.UUID generateId()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap.Restructure NEVER'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertyPlaceholderHelper java.lang.String replacePlaceholders(java.lang.String, java.util.Properties) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StringUtils java.lang.String unqualify(java.lang.String, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType WILDCARD_TYPE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Assert void isInstanceOf(java.lang.Class&lt;?&gt;, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StringUtils java.lang.String[] addStringToArray(java.lang.String[], java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CollectionUtils void mergeArrayIntoCollection(java.lang.Object, java.util.Collection&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String convertClassNameToResourcePath(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.IdGenerator java.util.UUID generateId()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String getShortName(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType.SpecificityComparator int compare(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.SystemPropertyUtils PLACEHOLDER_PREFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.net.URL) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Assert void notNull(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.net.URL)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.net.URI, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType.SpecificityComparator int compare(T, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean hasAtLeastOneMethodWithName(java.lang.Class&lt;?&gt;, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils void copy(java.lang.String, java.io.Writer) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils java.io.InputStream nonClosing(java.io.InputStream)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher boolean isPattern(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils IMAGE_JPEG'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertyPlaceholderHelper java.lang.String replacePlaceholders(java.lang.String, java.util.Properties) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher boolean doMatch(java.lang.String, java.lang.String, boolean, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils TEXT_PLAIN'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils URL_PROTOCOL_JAR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils boolean isCglibRenamedMethod(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertiesPersister void load(java.util.Properties, java.io.InputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ResourceUtils java.net.URI toURI(java.net.URL)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PathMatcher boolean isPattern(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.DigestUtils java.lang.String md5DigestAsHex(byte[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils int copy(java.io.InputStream, java.io.OutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StringUtils java.lang.String[] trimArrayElements(java.lang.String[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PathMatcher java.util.Comparator&lt;java.lang.String&gt; getPatternComparator(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.PropertiesPersister void storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.MimeType MimeType(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.NumberUtils T convertNumberToTargetClass(java.lang.Number, java.lang.Class&lt;T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap.Restructure WHEN_NECESSARY'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MethodInvoker int getTypeDifferenceWeight(java.lang.Class&lt;?&gt;[], java.lang.Object[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.Object invokeMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils void copy(java.lang.String, java.io.Writer) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils java.io.InputStream nonClosing(java.io.InputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.SocketUtils java.util.SortedSet&lt;java.lang.Integer&gt; findAvailableTcpPorts(int, int, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.net.URI toURI(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Assert void isAssignable(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.reflect.Method getStaticMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_XML'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StringUtils java.lang.String applyRelativePath(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.Class&lt;?&gt; resolvePrimitiveIfNecessary(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.NumberUtils T parseNumber(java.lang.String, java.lang.Class&lt;T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils TEXT_PLAIN_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertyPlaceholderHelper PropertyPlaceholderHelper(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils IMAGE_PNG_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isPrimitiveOrWrapper(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils byte[] copyToByteArray(java.io.InputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap org.springframework.util.ConcurrentReferenceHashMap&lt;K,V&gt;.ReferenceManager createReferenceManager()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.reflect.Method getMethodIfAvailable(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils int copy(java.io.InputStream, java.io.OutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isPrimitiveWrapper(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.util.Set&lt;java.lang.Class&lt;?&gt;&gt; getAllInterfacesAsSet(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap.Segment Segment(org.springframework.util.ConcurrentReferenceHashMap, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Assert void isAssignable(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher java.util.Map&lt;java.lang.String,java.lang.String&gt; extractUriTemplateVariables(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils CLASSPATH_URL_PREFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.net.URL, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_ATOM_XML'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils boolean isFileURL(java.net.URL) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileSystemUtils void copyRecursively(java.io.File, java.io.File) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.reflect.Method getStaticMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils URL_PROTOCOL_VFS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.InstanceFilter boolean match(T, java.util.Collection&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StringUtils java.lang.String unqualify(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isAssignable(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ExceptionTypeFilter boolean match(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType MimeType(java.lang.String, java.lang.String, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void shallowCopyFieldState(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.NumberUtils T parseNumber(java.lang.String, java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap ConcurrentReferenceHashMap(int, float, int, org.springframework.util.ConcurrentReferenceHashMap.ReferenceType) 3'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType int compareTo(org.springframework.util.MimeType) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType MimeType(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher boolean matchStart(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isPrimitiveWrapperArray(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.reflect.Method getMethodIfAvailable(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Assert void isAssignable(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils boolean isPublicStaticFinal(java.lang.reflect.Field) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher java.util.Map&lt;java.lang.String,java.lang.String&gt; extractUriTemplateVariables(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.LinkedCaseInsensitiveMap void putAll(java.util.Map&lt;? extends java.lang.String,? extends V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_ATOM_XML_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.util.Set&lt;java.lang.Class&lt;?&gt;&gt; getAllInterfacesForClassAsSet(java.lang.Class&lt;?&gt;, java.lang.ClassLoader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.net.URI) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType.SpecificityComparator int compare(T, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileSystemUtils void copyRecursively(java.io.File, java.io.File) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.SystemPropertyUtils java.lang.String resolvePlaceholders(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap ConcurrentReferenceHashMap(int, org.springframework.util.ConcurrentReferenceHashMap.ReferenceType) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean hasAtLeastOneMethodWithName(java.lang.Class&lt;?&gt;, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils TEXT_HTML'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher java.util.Comparator&lt;java.lang.String&gt; getPatternComparator(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils void sortBySpecificity(java.util.List&lt;org.springframework.util.MimeType&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ExceptionTypeFilter boolean match(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ReflectionUtils void shallowCopyFieldState(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isUserLevelMethod(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isAssignable(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertiesPersister void store(java.util.Properties, java.io.Writer, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.NumberUtils T convertNumberToTargetClass(java.lang.Number, java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher boolean matchStart(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils CLASS_FILE_SUFFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void handleInvocationTargetException(java.lang.reflect.InvocationTargetException) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.LinkedCaseInsensitiveMap java.lang.Object put(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils int copy(java.io.InputStream, java.io.OutputStream) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String convertResourcePathToClassName(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap.Segment T doTask(int, java.lang.Object, org.springframework.util.ConcurrentReferenceHashMap&lt;K,V&gt;.Task&lt;T&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.Object invokeMethod(java.lang.reflect.Method, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ConcurrentReferenceHashMap.ReferenceType WEAK'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AutoPopulatingList AutoPopulatingList(java.util.List&lt;E&gt;, java.lang.Class&lt;? extends E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Log4jConfigurer void initLogging(java.lang.String, long) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils boolean isJarFileURL(java.net.URL) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertyPlaceholderHelper PropertyPlaceholderHelper(java.lang.String, java.lang.String, java.lang.String, boolean) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils TEXT_HTML_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.DefaultPropertiesPersister void storeToXml(java.util.Properties, java.io.OutputStream, java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils void copy(byte[], java.io.File) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.SystemPropertyUtils java.lang.String resolvePlaceholders(java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils IMAGE_GIF'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.InstanceFilter boolean match(T, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.MultiValueMap java.util.Map&lt;K,V&gt; toSingleValueMap()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ResourceUtils java.net.URI toURI(java.net.URL) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils boolean isJarURL(java.net.URL) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ObjectUtils E caseInsensitiveValueOf(E[], java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.LinkedMultiValueMap java.util.Map&lt;K,V&gt; toSingleValueMap()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StringUtils boolean substringMatch(java.lang.CharSequence, int, java.lang.CharSequence) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils void copy(byte[], java.io.OutputStream) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils void setField(java.lang.reflect.Field, java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils java.io.OutputStream nonClosing(java.io.OutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AutoPopulatingList AutoPopulatingList(java.util.List&lt;E&gt;, java.lang.Class&lt;? extends E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.net.URL, java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType MimeType(org.springframework.util.MimeType, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MultiValueMap void setAll(java.util.Map&lt;K,V&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.PropertyPlaceholderHelper PropertyPlaceholderHelper(java.lang.String, java.lang.String, java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils boolean declaresException(java.lang.reflect.Method, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isCacheSafe(java.lang.Class&lt;?&gt;, java.lang.ClassLoader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils java.lang.String toString(java.util.Collection&lt;? extends org.springframework.util.MimeType&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType MimeType(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.Class&lt;?&gt; createCompositeInterface(java.lang.Class&lt;?&gt;[], java.lang.ClassLoader) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Log4jConfigurer CLASSPATH_URL_PREFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.SystemPropertyUtils VALUE_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils SPECIFICITY_COMPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CollectionUtils org.springframework.util.MultiValueMap&lt;K,V&gt; toMultiValueMap(java.util.Map&lt;K,java.util.List&lt;V&gt;&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PathMatcher boolean match(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.DigestUtils java.lang.StringBuilder appendMd5DigestAsHex(byte[], java.lang.StringBuilder) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.SocketUtils java.util.SortedSet&lt;java.lang.Integer&gt; findAvailableTcpPorts(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils void copy(byte[], java.io.OutputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.Assert void isAssignable(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isPrimitiveArray(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.Object invokeJdbcMethod(java.lang.reflect.Method, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType int compareTo(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AutoPopulatingList AutoPopulatingList(java.util.List&lt;E&gt;, org.springframework.util.AutoPopulatingList.ElementFactory&lt;E&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StreamUtils java.io.OutputStream nonClosing(java.io.OutputStream)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.Object getField(java.lang.reflect.Field, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType void checkParameters(java.lang.String, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean isCglibProxy(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils TEXT_XML'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CollectionUtils A[] toArray(java.util.Enumeration&lt;E&gt;, A[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils.FieldFilter boolean matches(java.lang.reflect.Field) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.String getShortNameAsProperty(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher DEFAULT_PATH_SEPARATOR'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils int copy(java.io.InputStream, java.io.OutputStream) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.net.URI, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertyPlaceholderHelper java.lang.String replacePlaceholders(java.lang.String, org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils boolean hasConstructor(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PathMatcher boolean match(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.Log4jConfigurer void initLogging(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertiesPersister void store(java.util.Properties, java.io.OutputStream, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.MimeType org.springframework.util.MimeType valueOf(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.StringUtils java.lang.String toLanguageTag(java.util.Locale) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils void useCachesIfNecessary(java.net.URLConnection) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Method[] getAllDeclaredMethods(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher boolean doMatch(java.lang.String, java.lang.String, boolean, java.util.Map&lt;java.lang.String,java.lang.String&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_XHTML_XML'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils URL_PROTOCOL_FILE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.FileCopyUtils void copy(byte[], java.io.File) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeType void checkParameters(java.lang.String, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AntPathMatcher org.springframework.util.AntPathMatcher.AntPathStringMatcher getStringMatcher(java.lang.String)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.SystemPropertyUtils PLACEHOLDER_SUFFIX'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils java.io.File getFile(java.net.URI)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils MULTIPART_FORM_DATA_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils APPLICATION_OCTET_STREAM_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ResourceUtils JAR_FILE_EXTENSION'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.CollectionUtils void mergePropertiesIntoMap(java.util.Properties, java.util.Map&lt;K,V&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.MimeTypeUtils ALL_VALUE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.PropertiesPersister void loadFromXml(java.util.Properties, java.io.InputStream) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='org.springframework.util.ReflectionUtils java.lang.reflect.Method findMethod(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;...)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.ClassUtils java.lang.Class&lt;?&gt; resolveClassName(java.lang.String, java.lang.ClassLoader) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='org.springframework.util.AutoPopulatingList AutoPopulatingList(java.util.List&lt;E&gt;, org.springframework.util.AutoPopulatingList.ElementFactory&lt;E&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
